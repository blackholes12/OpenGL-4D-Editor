#version 440
#define PI 3.1415926535f
#define MaxWater4DAmount 12
in vec4 vs_position;
in vec4 vs_normal;
in vec3 vs_texcoord;
out vec4 fs_color;
vec4 col4;
float height;
struct DirectionLight4D
{
	vec4 direction4D;
	float intensity;
	vec3 color;
};

struct WaterArea4D
{
vec4 position4D;
vec4 scale4D;
};

uniform vec4 paintingColor;
layout (binding = 0) uniform sampler3D Tex3D;
uniform bool isFog;
uniform float fogDensity;

uniform int Water4DAmount;
uniform WaterArea4D[MaxWater4DAmount] waterArea4D;
uniform vec4 cameraPos;
uniform DirectionLight4D directionLight4D;

float[MaxWater4DAmount] waterHeight;
float[MaxWater4DAmount] waterDepth;
bool[MaxWater4DAmount] isWater;
bool isWater0=false;
float factor;
float directionFinal2;
float calculate_direction(vec4 vs_normal, vec4 direction)
{
	directionFinal2 = -dot(normalize(direction),vs_normal);
	return max(directionFinal2,0.f);
}
//const vec3 skyColor=vec3(0.f);
//const vec3 skyColor2=1.1f*vec3(63.f,55.f,43.f)/255.f;
//const vec3 skyColor3=1.1f*vec3(94.f,101.f,102.f)/255.f;
//const vec3 skyColor4=1.1f*vec3(103.f,120.f,138.f)/255.f;
//const vec3 skyColor5=1.1f*vec3(132.f,159.f,201.f)/255.f;
const vec3 skyColor1=vec3(0.3333f,0.4510f,0.6353f);
const vec3 skyColor2=vec3(0.2243f,0.2157f,0.202745f);
const vec3 skyColor3=vec3(0.33647f,0.3796f,0.4270588f);
const vec3 skyColor4=vec3(0.3839f,0.4615686f,0.565098f);
const vec3 skyColor5=vec3(0.49607943f,0.608235f,0.7937f);
vec3 global_sky_color()
{
    float sunLightHeight=-normalize(directionLight4D.direction4D).y;
    if(sunLightHeight<-0.07f)
    {
    return skyColor1;
    }
    else if(sunLightHeight>=-0.07f&&sunLightHeight<0.f)
    {
    return mix(skyColor1,skyColor2,(sunLightHeight+0.07f)/0.07f);
    }
    else if(sunLightHeight>=0.f&&sunLightHeight<0.1f)
    {
    return mix(skyColor2,skyColor3,(sunLightHeight)/0.1f);
    }
    else if(sunLightHeight>=0.1f&&sunLightHeight<0.2f)
    {
    return mix(skyColor3,skyColor4,(sunLightHeight-0.1f)/0.1f);
    }
    else if(sunLightHeight>=0.2f)
    {
    return mix(skyColor4,skyColor5,(sunLightHeight-0.2f)/0.8f);
    }
}

float viewDistance;

vec3 fog(vec3 A,vec3 B,float far)
{
return mix(B,A,exp(-far));
}

void main()
{
if(Water4DAmount>0)
{
height=vs_position.y;
for(int j=0;j < Water4DAmount;j++)
	{
	isWater[j]=false;
	if(
	abs(vs_position.x-waterArea4D[j].position4D.x)<=waterArea4D[j].scale4D.x/2.f&&
	abs(vs_position.y-waterArea4D[j].position4D.y+waterArea4D[j].scale4D.y/4.f)<=waterArea4D[j].scale4D.y/4.f&&
	abs(vs_position.z-waterArea4D[j].position4D.z)<=waterArea4D[j].scale4D.z/2.f&&
	abs(vs_position.w-waterArea4D[j].position4D.w)<=waterArea4D[j].scale4D.w/2.f)
	{
	isWater[j]=true;
    isWater0=true;
	waterHeight[j]=waterArea4D[j].position4D.y;
    if(height<waterHeight[j])
    {
         waterDepth[j]=-height+waterHeight[j];
	}
    }
}
}

col4=texture(Tex3D,vs_texcoord);
col4*=paintingColor;
if(isFog)
{
if(isWater0==false)
{
vec3 directionLightColor;
if(directionLight4D.direction4D.y<0.0043633f)
{
directionLightColor=directionLight4D.color;
if(directionLight4D.direction4D.y>-0.0043633f)
{
directionLightColor=mix(directionLightColor,vec3(0.f),smoothstep(0.f,1.f,(directionLight4D.direction4D.y+0.0043633f)/(0.0043633f*2.f)));
}
}
else
{
directionLightColor=vec3(0.f);
}
vec3 globalSkyColor=global_sky_color();
vec3 fogColor=(globalSkyColor+0.55f*(directionLight4D.color*directionLight4D.intensity*calculate_direction(vec4(0.f,1.f,0.f,0.f),directionLight4D.direction4D)+globalSkyColor))/2.f+directionLightColor/PI;
viewDistance=length(cameraPos-vs_position);
factor=fog(vec3(0.f),vec3(1.f),viewDistance*0.03861f*fogDensity).x;
if(viewDistance<100000)
col4.xyz=fog(col4.xyz,fogColor,viewDistance*0.03861f*fogDensity);
else
col4.xyz=fog(col4.xyz,fogColor,0.5f);
}
}

if(Water4DAmount>0)
{
viewDistance=length(cameraPos-vs_position);
for(int k=0;k < Water4DAmount;k++)
{
   if(isWater[k]==true)
   {
if(height<waterHeight[k])
{
if(cameraPos.y>waterHeight[k])
{
col4.xyz=mix(col4.xyz,0.72f*vec3(0.28f),clamp(1.f-exp(-0.53333f*waterDepth[k]),0.f,1.f));
}
if(cameraPos.y<=waterHeight[k])
{
col4.xyz=fog(col4.xyz,vec3(0.1875f,0.4f,0.79f),viewDistance*0.1f);
}
}
   }
}
}

fs_color=col4;
}