#version 440

in float vs_distance;
in vec3 vs_color;

out vec4 fs_color;

uniform float iTime;
uniform int trailFadeType;

vec3 color3;
vec4 color4;
float duringTime;

vec3 gradientColor3;
vec3 colorGradient(float x)
{
if(x>5.f)
{
gradientColor3=vec3(1.f);
}
if(x<=5.f&&x>1.f)
{
gradientColor3=mix(vec3(0,0.5f,1),vec3(1.f),(x-1.f)/4.f);
}
if(x<=1.f&&x>0.f)
{
gradientColor3=mix(vec3(0,1,0),vec3(0,0.5f,1),(x-0.f)/1.f);
}
if(x<=0.f&&x>-1.f)
{
gradientColor3=mix(vec3(1,0,0),vec3(0,1,0),(x+1.f)/1.f);
}
if(x<=-1.f&&x>-5.f)
{
gradientColor3=mix(vec3(0,0,0),vec3(1,0,0),(x+5.f)/4.f);
}
if(x<=-5.f)
{
gradientColor3=vec3(0,0,0);
}
return gradientColor3;
}
//1.f-clamp((iTime-vs_color.y)/30.f,0.f,1.f)

float fade(float time)
{
   if(trailFadeType==0)
   {
   if(time<=30.f)
   return (-log(time+0.01f)+0.000035f*time*time+0.030f*time+2.470f)/7.075f;
   else
   return 0.f;
   }
   if(trailFadeType==1)
   {
   if(time<=30.f)
   return 1.f-time/30.f;
   else
   return 0.f;
   }
   if(trailFadeType==2)
   {
   return 1.f;
   }
}

void main()
{
color3=colorGradient(vs_distance);
duringTime=iTime-vs_color.y;
color4=vec4(color3,fade(duringTime));
fs_color = color4;
};