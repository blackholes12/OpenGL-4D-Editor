#version 440 core
#define MaxPointLight4DAmount 512
#define LOCAL_SIZE 128
layout(local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

struct PointLight4D
{
	vec4 position4D;
	float intensity;
	vec3 color;
	float radius;
};

struct Cluster
{
    vec4 minPoint;
    vec4 maxPoint;
    uint lightsLength;
    uint lightIndices[100];
};

layout(std430, binding = 1) restrict buffer clusterSSBO
{
    Cluster clusters[];
};

uniform int PointLight4DAmount;
uniform PointLight4D[MaxPointLight4DAmount] pointLights4D;
uniform mat4 viewMat;

bool testSphereAABB(uint i, Cluster c);
 
// each invocation of main() is a thread processing a cluster
void main()
{
    uint index = gl_WorkGroupID.x * LOCAL_SIZE + gl_LocalInvocationID.x;
    Cluster cluster = clusters[index];

    // we need to reset lightsLength because culling runs every frame.
    // otherwise it would accumulate.
    cluster.lightsLength = 0;

    for (uint i = 0; i < PointLight4DAmount; ++i)
    {
        if (testSphereAABB(i, cluster) && cluster.lightsLength < 100)
        {
            cluster.lightIndices[cluster.lightsLength] = i;
            cluster.lightsLength++;
        }
    }
    clusters[index] = cluster;
}

bool sphereAABBIntersection(vec3 center, float radius, vec3 aabbMin, vec3 aabbMax)
{
    // closest point on the AABB to the sphere center
    vec3 closestPoint = clamp(center, aabbMin, aabbMax);
    // squared distance between the sphere center and closest point
    float distanceSquared = dot(closestPoint - center, closestPoint - center);
    return distanceSquared < radius * radius;
}

// this just unpacks data for sphereAABBIntersection
bool testSphereAABB(uint i, Cluster cluster)
{
    vec4 center4D = viewMat * pointLights4D[i].position4D;
    vec3 center = center4D.xyz;
    float radius = sqrt(pointLights4D[i].radius*pointLights4D[i].radius-center4D.w*center4D.w);
    vec3 aabbMin = cluster.minPoint.xyz;
    vec3 aabbMax = cluster.maxPoint.xyz;

    return sphereAABBIntersection(center, radius, aabbMin, aabbMax);
}