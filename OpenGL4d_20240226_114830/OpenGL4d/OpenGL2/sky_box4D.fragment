#version 440
#define PI 3.1415926535f
in vec4 vs_position;
out vec4 fs_color;

//Uniforms
layout (binding = 3) uniform sampler3D diffuse3D;
layout (binding = 4) uniform sampler3D starsField3D;

uniform float iTime;
struct DirectionLight4D
{
	vec4 direction4D;
	float intensity;
	vec3 color;
};
uniform DirectionLight4D directionLight4D;
uniform vec4 cameraPos;
vec4 color;
vec4 direction;
vec3 uv,uv2,a,a2;
float extreme;

float direction2,directionFinal2;

float calculate_direction(vec4 vs_normal, vec4 direction)
{
	directionFinal2 = -dot(normalize(direction),vs_normal);
	return max(directionFinal2,0.f);
}

//sky color1:vec3(0.294f,0.376f,0.525f)
//sky color2:vec3(0.333f,0.451f,0.635f)

/* const matrices for 3d rotation */
const mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);
const mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);
const mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);

/* directional artifacts can be reduced by rotating each octave */
float fbm(vec3 p) {
    
    float f = 0.5000 * texture(diffuse3D,p/128.f).r; p = rot1 * p * 2.02;
    f += 0.2500 * texture(diffuse3D,p/128.f).r; p = rot1 * p * 2.03;
    f += 0.1250 * texture(diffuse3D,p/128.f).r; p = rot1 * p * 2.01;
    f += 0.0625 * texture(diffuse3D,p/128.f).r;
    return f / 0.9375;
}
const vec3 skyColor1=vec3(0.3333f,0.4510f,0.6353f);
const vec3 skyColor2=vec3(0.2243f,0.2157f,0.202745f);
const vec3 skyColor3=vec3(0.33647f,0.3796f,0.4270588f);
const vec3 skyColor4=vec3(0.3839f,0.4615686f,0.565098f);
const vec3 skyColor5=vec3(0.49607943f,0.608235f,0.7937f);
vec3 global_sky_color()
{
    float sunLightHeight=-normalize(directionLight4D.direction4D).y;
    if(sunLightHeight<-0.07f)
    {
    return skyColor1;
    }
    else if(sunLightHeight>=-0.07f&&sunLightHeight<0.f)
    {
    return mix(skyColor1,skyColor2,(sunLightHeight+0.07f)/0.07f);
    }
    else if(sunLightHeight>=0.f&&sunLightHeight<0.1f)
    {
    return mix(skyColor2,skyColor3,(sunLightHeight)/0.1f);
    }
    else if(sunLightHeight>=0.1f&&sunLightHeight<0.2f)
    {
    return mix(skyColor3,skyColor4,(sunLightHeight-0.1f)/0.1f);
    }
    else if(sunLightHeight>=0.2f)
    {
    return mix(skyColor4,skyColor5,(sunLightHeight-0.2f)/0.8f);
    }
}
vec3 ground_color()
{
   return vec3(0.392f,0.494f,0.039f)*(directionLight4D.color*directionLight4D.intensity*calculate_direction(vec4(0.f,1.f,0.f,0.f),directionLight4D.direction4D)+global_sky_color());
}
vec3 stars_color(vec4 ray)
{
	vec4 ray2;
	ray2.z=ray.z*cos(PI/3.f)-ray.y*sin(PI/3.f);
	ray2.y=ray.z*sin(PI/3.f)+ray.y*cos(PI/3.f);
    ray2.xw=ray.xw;
    vec4 ray3;
    ray3.x=ray2.x*cos(-iTime*PI/60.f)-ray2.z*sin(-iTime*PI/60.f);
	ray3.z=ray2.x*sin(-iTime*PI/60.f)+ray2.z*cos(-iTime*PI/60.f);
	ray3.yw=ray2.yw;
if(abs(ray3.x)>abs(ray3.y)&&abs(ray3.x)>abs(ray3.z)&&abs(ray3.x)>abs(ray3.w))
{
return texture(starsField3D, vec3(1.f/sqrt(2.f),sqrt(2.f),sqrt(2.f))*ray3.yzw/2.f).xyz;
}
if(abs(ray3.y)>abs(ray3.x)&&abs(ray3.y)>abs(ray3.z)&&abs(ray3.y)>abs(ray3.w))
{
return texture(starsField3D, vec3(1.f/sqrt(2.f),sqrt(2.f),sqrt(2.f))*ray3.xzw/2.f).xyz;
}
if(abs(ray3.z)>abs(ray3.x)&&abs(ray3.z)>abs(ray3.y)&&abs(ray3.z)>abs(ray3.w))
{
return texture(starsField3D, vec3(1.f/sqrt(2.f),sqrt(2.f),sqrt(2.f))*ray3.xyw/2.f).xyz;
}
if(abs(ray3.w)>abs(ray3.x)&&abs(ray3.w)>abs(ray3.y)&&abs(ray3.w)>abs(ray3.z))
{
return texture(starsField3D, vec3(1.f/sqrt(2.f),sqrt(2.f),sqrt(2.f))*ray3.xyz/2.f).xyz;
}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define atmosphereHeight 8228.
#define earthRadius 6371000.
#define mieHeight 1200
//http://www.vendian.org/mncharity/dir3/starcolor/
#define sunColor pow(vec3(0xff,0xf5,0xf2)/255.,vec3(2.2))
#define ozoneHeight 30000.
// http://skyrenderer.blogspot.com/2012/10/ozone-absorption.html
// https://www.spectroscopyeurope.com/article/new-broadband-high-resolution-ozone-absorption-cross-sections
#define ozoneCoefficient (vec3(3.426, 8.298, .356) * 6e-5 / 100.)
#define mieCoefficient 3.3e-6 // adjust for foggier look
#define earthAlbedo pow(vec3(0x99,0x92,0x80)/255.,vec3(2.2))

// ( Riley, Ebert, Kraus )
//#define rayleighCoefficient vec3(5.8e-6  , 1.35e-5 , 3.31e-5 )
// ( Bucholtz )
//#define rayleighCoefficient vec3(4.847e-6, 1.149e-5, 2.87e-5 ) 
// ( Thalman, Zarzana, Tolbert, Volkamer )
//#define rayleighCoefficient vec3(5.358e-6, 1.253e-5, 3.062e-5)
// ( Penndorf )
#define rayleighCoefficient vec3(5.178e-6, 1.226e-5, 3.06e-5 )

#define up vec4(0,1,0,0)

//b = dotup
vec3 get_sky_thicknesses(float b){
    const vec4 sr = earthRadius + vec4(
        atmosphereHeight,
        mieHeight,
        ozoneHeight,
        ozoneHeight + atmosphereHeight
    );
    b*=earthRadius;
    const float r2 = earthRadius * earthRadius;
    vec4 z = sqrt( sr * sr + (b * b - r2) );
    return vec3(b+z.xy, z.w-z.z);
}

// Improved Rayleigh phase for single scattering
// https://old.cescg.org/CESCG-2009/papers/PragueCUNI-Elek-Oskar09.pdf
// note: integral from -1 to 1 of function in the paper is 2.24
#define phaseRayleigh(a) (( .4 * (a) + 1.12 )/2.24)
//#define phaseRayleigh(a) ((3./8.)*(1.+(a)*(a)))

// (Henyey Greenstein)
// https://www.astro.umd.edu/~jph/HG_note.pdf
float phaseg(float x,float g){
    const float  b = 1./2.;
    float a = inversesqrt(1.+g*g-2.*g*x);
	return b*(1.-g*g)*a*a*a;
}
float phase_mie(const float VdotL, const float depth){
    //curve fit with turingbot
    float g = atan(sin(pow(0.7,depth*mieCoefficient)));
    return 2.f*phaseg(VdotL, g);
}


// https://iquilezles.org/articles/sphereshadow
float sph_soft_shadow(vec4 position,vec4 L){
    const float k = 5.;
    //vec4 sph = vec4(-up*earthRadius,earthRadius);
    vec4 oc = position + up * earthRadius;
    float b = dot( oc, L );
    float c = dot( oc, oc ) - earthRadius*earthRadius;
    float h = b*b - c;
    
    float d = -earthRadius + sqrt( max(0.0,earthRadius*earthRadius-h));
    float t = -b - sqrt( max(0.0,h) );
    return (t<0.0) ? 1.0 : smoothstep(0.0, 1.0, 2.5*k*d/t );
}

vec3 linearToSrgb(const vec3 x){
    return sqrt((-2.8450663e-1*x+1.2580714)*x-2.4727747e-3);
}

vec3 get_sky(const vec4 V, const vec4 L) {
    vec3 color3=vec3(0.f);
    float VdotUp = -V.y;
    float LdotUp = -L.y;
    if(-VdotUp>-0.02f)
    {
    if(-LdotUp>-0.15f)
    {
      const mat3 coeffs = mat3(
        rayleighCoefficient      ,
        vec3(mieCoefficient), // mie absorbs (Bruneton)
        ozoneCoefficient
    );

    vec3 thicknesses = get_sky_thicknesses(VdotUp);
    float VdotL = dot(V, L);
    float phaseMie=phase_mie(VdotL, thicknesses.y);
    vec3 rayleighScatter =(thicknesses.x * phaseRayleigh(VdotL))          * rayleighCoefficient;
    float     mieScatter = thicknesses.y * phaseMie *      mieCoefficient;

	vec3 scattering = rayleighScatter + mieScatter;
    
    vec3 sunCoeff = coeffs * get_sky_thicknesses(LdotUp);
    vec3 viewCoeff = coeffs * thicknesses;
    vec3 absorption = (exp(-viewCoeff)-exp(-sunCoeff)) / (sunCoeff - viewCoeff);
    
    //  integral of x from 0 to 1
    //  exp( -a*x - b*(1-x) )
    //
    //  e?? - e??
    // ---------
    //  (a - b) 
    
    float earthShadow = sph_soft_shadow(thicknesses.x*V,L);
    
    //if(VdotUp>0.f)return ground_color();
    color3=sunColor * scattering * absorption * earthShadow;
    color3=1.4f*linearToSrgb(color3);
    //color3=max(color3,0.f);
    //if(-LdotUp<0.f)
    //{
    //    color3 += clamp(LdotUp/0.15f,0.f,1.f) * stars_color(V);
    //}
    if(VdotL>0.7f)
    {
    color3+=1.09f*1.38f*directionLight4D.color/(6000.f*(1.f-VdotL))/2.f;
        if(VdotL>0.99999f)
    {
    color3+=1.09f*138.f*directionLight4D.color;
    }
    }
    color3*=1.1f*1.1f;
    if(VdotUp<0.f)
    {
    if(10000.f-cameraPos.y>0.f)
    {
     vec4 cloudPlaneCoordinate=(10000.f-cameraPos.y)*V/V.y+cameraPos;
    float cloudDensity = max(0.5 * smoothstep(0.5f, 0.8f, -0.09+1.53f*fbm(1.255f*(cloudPlaneCoordinate.xzw+vec3(28.284f*iTime,0.f,28.284f*iTime))/10000.f)),0.f);

    vec3 sunCoeff2 = sunCoeff/3.95f;
    vec3 viewCoeff2 = viewCoeff/3.95f;
    vec3 absorption2 = (exp(-viewCoeff2)-exp(-sunCoeff2)) / (sunCoeff2 - viewCoeff2);
    vec3 cloudColor3=1.1f*(vec3(directionLight4D.color.g)*(1.09f*1.15f*1.044503f*1.38/1.4f/1.275+1.09f*1.15f*1.044503f*1.38/1.4f*0.059*directionLight4D.color*phaseMie))*linearToSrgb(absorption2 *vec3(1.f,0.95f,1.f));
    float transmittance=exp(-0.0635f/-VdotUp);                                   //1.15f*1.044503f*1.08/1.4f/1.275 //// 1.15f*1.044503f*1.08/1.4f*0.059
    color3=mix(color3,cloudColor3,cloudDensity*transmittance);
    }
    }
    }
    if(-VdotUp>0.02f)
    {
       return max(color3,0.f);
    }
    if(-VdotUp>-0.02f&&-VdotUp<0.02f)
	{
	   return mix(ground_color(),max(color3,0.f),25.f*(-VdotUp+0.02));
	}
    }  
    else
    {
    return ground_color();
    }
}

    //extreme=abs(vs_position.x+vs_position.y+vs_position.z+vs_position.w)/4.f;
	//direction=normalize(vs_position/extreme);

void main()
{
	direction=normalize(vs_position);
	color=vec4(get_sky(direction,-directionLight4D.direction4D),1.f);
	fs_color = color;
}