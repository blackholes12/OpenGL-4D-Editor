#version 440
layout (location = 0) in vec4 translate4D;
layout (location = 1) in vec4 color;
layout (location = 2) in float radius;

layout (location = 3) in vec4 vertex_A;
layout (location = 4) in vec4 vertex_B;
layout (location = 5) in vec4 vertex_C;
layout (location = 6) in vec4 vertex_D;

layout (location = 7) in vec3 texcoord_A;
layout (location = 8) in vec3 texcoord_B;
layout (location = 9) in vec3 texcoord_C;
layout (location = 10) in vec3 texcoord_D;

layout (location = 11) in int id;

out vec3 vs_texcoord;
out vec4 vs_color;

uniform mat4 viewMat,projectionMat;
uniform vec4 cameraPos;
layout (binding = 2) uniform sampler2D vertexMap;

vec4 pA,pB,pC,pD;
int line;
int i,vertexAmount;
vec4 col4;

vec4 relativePos0,relativePos,pos0;

float disA,disB,disC,disD;

vec3 vector3;
vec3 slice(vec3 A,vec3 B,vec3 C,vec3 D,float disA,float disB,float disC,float disD,int line)
{
switch(line)
{
case 2:vector3=mix(A,B,disA/(disA-disB));break;
case 3:vector3=mix(A,C,disA/(disA-disC));break;
case 4:vector3=mix(A,D,disA/(disA-disD));break;
case 6:vector3=mix(B,C,disB/(disB-disC));break;
case 8:vector3=mix(B,D,disB/(disB-disD));break;
case 12:vector3=mix(C,D,disC/(disC-disD));break;
}
return vector3;
}

vec4 vector4;
vec4 slice(vec4 A,vec4 B,vec4 C,vec4 D,float disA,float disB,float disC,float disD,int line)
{
switch(line)
{
case 2:vector4=mix(A,B,disA/(disA-disB));break;
case 3:vector4=mix(A,C,disA/(disA-disC));break;
case 4:vector4=mix(A,D,disA/(disA-disD));break;
case 6:vector4=mix(B,C,disB/(disB-disC));break;
case 8:vector4=mix(B,D,disB/(disB-disD));break;
case 12:vector4=mix(C,D,disC/(disC-disD));break;
}
return vector4;
}

vec4 cross4d(vec4 a2, vec4 a3, vec4 a4) {
	return vec4(
		a2.y * a3.z * a4.w - a2.y * a3.w * a4.z - a2.z * a3.y * a4.w + a2.z * a3.w * a4.y + a2.w * a3.y * a4.z - a2.w * a3.z * a4.y,
		-a2.x * a3.z * a4.w + a2.x * a3.w * a4.z + a2.z * a3.x * a4.w - a2.z * a3.w * a4.x - a2.w * a3.x * a4.z + a2.w * a3.z * a4.x,
		a2.x * a3.y * a4.w - a2.x * a3.w * a4.y - a2.y * a3.x * a4.w + a2.y * a3.w * a4.x + a2.w * a3.x * a4.y - a2.w * a3.y * a4.x,
		-a2.x * a3.y * a4.z + a2.x * a3.z * a4.y + a2.y * a3.x * a4.z - a2.y * a3.z * a4.x - a2.z * a3.x * a4.y + a2.z * a3.y * a4.x
	);
}

vec4[3] orthonormal_basis(vec4 normal4D)
{
    vec4 vec41,vec42,vec43;
	if (vec3(normal4D.x, normal4D.y, normal4D.z) == vec3(0.f))
	{
		vec41 = vec4(-normal4D.w, 0.f, 0.f, 0.f);
		vec42 = vec4(0.f, 1.f, 0.f, 0.f);
		vec43 = vec4(0.f, 0.f, 1.f, 0.f);
	}
	else if (vec3(normal4D.x, normal4D.y, normal4D.w) == vec3(0.f))
	{
		vec41 = vec4(normal4D.z, 0.f, 0.f, 0.f);
		vec42 = vec4(0.f, 1.f, 0.f, 0.f);
		vec43 = vec4(0.f, 0.f, 0.f, 1.f);
	}
	else if (vec3(normal4D.x, normal4D.z, normal4D.w) == vec3(0.f))
	{
		vec41 = vec4(-normal4D.y, 0.f, 0.f, 0.f);
		vec42 = vec4(0.f, 0.f, 1.f, 0.f);
		vec43 = vec4(0.f, 0.f, 0.f, 1.f);
	}
	else if (vec3(normal4D.y, normal4D.z, normal4D.w) == vec3(0.f))
	{
		vec41 = vec4(0.f, normal4D.x, 0.f, 0.f);
		vec42 = vec4(0.f, 0.f, 1.f, 0.f);
		vec43 = vec4(0.f, 0.f, 0.f, 1.f);
	}
	else
	{
		vec4 vA = normalize(vec4(0.f, 1.f, 0.f, 0.f));
		vec4 nA = normalize(vA / dot(vA, normal4D) - normal4D);
		if(normal4D.y<0.f)
		vec41 = nA;
		else if(normal4D.y==0.f)
		vec41 = -vA;
		else
		vec41 = -nA;
        vec3 v1 = cross((vec4(0.f,0.f, 0.f, 1.f)*viewMat).xzw,normal4D.xzw);
		vec42 = normalize(vec4(v1.x,0.f,v1.y,v1.z));
		vec3 v2 = cross(vec42.xzw,normal4D.xzw);
		vec43 = normalize(vec4(v2.x,0.f,v2.y,v2.z));
	}
	vec4[3] vec4s;
	vec4s[0]=vec41;
	vec4s[1]=vec42;
	vec4s[2]=vec43;
	return vec4s;
}

mat4 lookAtMat4(vec4 from, vec4 to)
{
    vec4[3] vec4s;
    vec4 x,y,z,w;
	z = normalize(to - from);
    vec4s = orthonormal_basis(z);
	y=vec4s[0];
	w=vec4s[1];
	x=vec4s[2];
	return mat4(x,y,z,w);
}

mat4 lightMat4;

void main()
{
relativePos0=translate4D-cameraPos;
lightMat4=2.f*radius*lookAtMat4(translate4D,cameraPos);
pA=viewMat*(lightMat4 * vertex_A+relativePos0);disA=pA.w;
pB=viewMat*(lightMat4 * vertex_B+relativePos0);disB=pB.w;
pC=viewMat*(lightMat4 * vertex_C+relativePos0);disC=pC.w;
pD=viewMat*(lightMat4 * vertex_D+relativePos0);disD=pD.w;

col4=texelFetch(vertexMap,ivec2(8*int(disA>0)+4*int(disB>0)+2*int(disC>0)+int(disD>0),id),0);

if(col4.x!=0.f)
{
line=int(col4.x*256.f);
vertexAmount=int(col4.y*256.f);
pos0=slice(pA,pB,pC,pD,disA,disB,disC,disD,line);
if(vertexAmount!=3||id!=3)
{
vs_texcoord=slice(texcoord_A,texcoord_B,texcoord_C,texcoord_D,disA,disB,disC,disD,line);
}

gl_Position = projectionMat * vec4(pos0.xyz, 1.f);
}
else
gl_Position =  vec4(0.f);
}